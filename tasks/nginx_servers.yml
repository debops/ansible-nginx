---

- name: Create global webroot directories if allowed
  file:
    path: '/srv/www/sites/{{ item.name[0] | default("default") }}/public'
    state: 'directory'
    owner: '{{ nginx_webroot_owner }}'
    group: '{{ nginx_webroot_group }}'
    mode: '{{ nginx_webroot_mode }}'
  with_items: nginx_servers
  when: ((nginx_webroot_create is defined and nginx_webroot_create) and
         (item.name is defined) and
         (item.root is undefined and item.owner is undefined and item.group is undefined))

- name: Create default index.html if enabled
  copy:
    content: '{{ item.default_index }}'
    dest: '/srv/www/sites/{{ item.name[0] | default("default") }}/public/index.html'
    owner: '{{ item.owner | default(nginx_webroot_owner) }}'
    group: '{{ item.owner | default(nginx_webroot_group) }}'
    mode: '0644'
    force: False
  with_items: nginx_servers
  when: ((item.locked is undefined or (item.locked is defined and not item.locked)) and
         (item.name is defined) and (item.delete is undefined or (item.delete is defined and not item.delete)) and
         (item.default_index is defined and item.default_index))

- name: Remove nginx server configuration if requested
  file:
    path: '/etc/nginx/sites-available/{{ item.filename | default(item.name[0] | default("default")) }}.conf'
    state: 'absent'
  with_items: nginx_servers
  notify: [ 'Test nginx and reload' ]
  when: ((item.locked is undefined or (item.locked is defined and not item.locked)) and
         (item.name is defined) and (item.delete is defined and item.delete))

- name: Get last used HTTP default_server for default_server roulette
  set_fact:
    nginx_register_default_server_saved: '{{ ansible_local.nginx.default_server }}'
  when: (ansible_local is defined and ansible_local.nginx is defined and
         ansible_local.nginx.default_server is defined)

- name: Get last used HTTPS default_server for default_server roulette
  set_fact:
    nginx_register_default_server_ssl_saved: '{{ ansible_local.nginx.default_server_ssl }}'
  when: (ansible_local is defined and ansible_local.nginx is defined and
         ansible_local.nginx.default_server_ssl is defined)

- name: Get HTTP server from nginx defaults for default_server roulette
  set_fact:
    nginx_register_default_server_name: '{{ nginx_default_name }}'
  when: nginx_default_name is defined and nginx_default_name

- name: Get HTTPS server from nginx defaults for default_server roulette
  set_fact:
    nginx_register_default_server_ssl_name: '{{ nginx_default_ssl_name }}'
  when: nginx_default_ssl_name is defined and nginx_default_ssl_name

- name: Get first server that listens on http port for default_server roulette
  set_fact:
    nginx_register_default_server_http: '{{ item.name[0] | default("default") }}'
  with_items: nginx_servers[::-1]
  when: ((item.enabled is defined and item.enabled) and
         (item.listen is undefined or (item.listen is defined and item.listen)) and not
         ((item.ssl is defined and item.ssl) or
          (nginx_pki | bool)))

- name: Get first server that listens on https port for default_server roulette
  set_fact:
    nginx_register_default_server_https: '{{ item.name[0] | default("default") }}'
  with_items: nginx_servers[::-1]
  when: ((item.enabled is defined and item.enabled) and
         (item.listen_ssl is undefined or (item.listen_ssl is defined and item.listen_ssl)) and
         ((item.ssl is defined and item.ssl) or
          (nginx_pki | bool)))

- name: Spin the HTTP default_server roulette!
  set_fact:
    nginx_register_default_server: '{{ nginx_register_default_server_saved |
                                         default(nginx_register_default_server_name |
                                           default(nginx_register_default_server_http |
                                             default(""))) }}'

- name: Spin the HTTPS default_server roulette!
  set_fact:
    nginx_register_default_server_ssl: '{{ nginx_register_default_server_ssl_saved |
                                             default(nginx_register_default_server_ssl_name |
                                               default(nginx_register_default_server_https |
                                                 default(""))) }}'

- name: Generate nginx server configuration
  template:
    src: 'etc/nginx/sites-available/{{ item.type | default(nginx_default_type) }}.conf.j2'
    dest: '/etc/nginx/sites-available/{{ item.filename | default(item.name[0] | default("default")) }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: nginx_servers
  notify: [ 'Test nginx and reload' ]
  when: ((item.locked is undefined or (item.locked is defined and not item.locked)) and
         (item.name is defined) and (item.delete is undefined or (item.delete is defined and not item.delete)))

- name: Disable nginx server configuration
  file:
    path: '/etc/nginx/sites-enabled/{{ item.filename | default(item.name[0] | default("default")) }}.conf'
    state: 'absent'
  with_items: nginx_servers
  notify: [ 'Test nginx and restart' ]
  when: (((item.enabled is defined and not item.enabled) and (item.name is defined)) or
        (item.delete is defined and item.delete))

- name: Enable nginx server configuration
  file:
    path: '/etc/nginx/sites-enabled/{{ item.filename | default(item.name[0] | default("default")) }}.conf'
    src: '/etc/nginx/sites-available/{{ item.filename | default(item.name[0] | default("default")) }}.conf'
    state: 'link'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: nginx_servers
  notify: [ 'Test nginx and restart' ]
  when: ((item.enabled is undefined or (item.enabled is defined and item.enabled)) and
         (item.name is defined) and (item.delete is undefined or (item.delete is defined and not item.delete)))

